name: Linux
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

on:
  push:
    branches: master
    paths:
    - 'src/**/**'
    - 'support/**/*.cpp'
    - '**meson.build'
    - 'setup-build.*'
    - 'subprojects/*.wrap'
    - '**/c-cpp.yml'
  pull_request:
    branches: master
    paths:
    - 'src/**/**'
    - 'support/**/*.cpp'
    - 'setup-build.*'
    - '**meson.build'
    - 'subprojects/*.wrap'
    - '**/c-cpp.yml'

jobs:
  build:
    name: ${{ matrix.name }}-Ubuntu-${{ matrix.ubuntu }}-${{ matrix.cc }}
    strategy:
      fail-fast: true
      matrix:
        name: [standard]
        # 20.04 supported until >= April 2025
        ubuntu: [20.04, 22.04, 24.04]
        cc: [gcc, clang]
        include:
          - name: data-install-test
            ubuntu: 22.04
          - name: no-deps
            ubuntu: 22.04
          - name: cross-aarch64
            ubuntu: 22.04
            cross-file: 'support/cross/aarch64-linux-gcc.txt'
          - name: cross-x86_64-w64-mingw32
            ubuntu: 22.04
            cross-file: 'support/cross/x86_64-w64-mingw32.txt'

    runs-on: ubuntu-${{ matrix.ubuntu }}
    env:
      MESON_OPTS: '_build'
      NETPANZER_DATADIR: ${{ github.workspace }}/data
      INST_PREFIX_DIR: ${{ github.workspace }}/inst_test
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false

    - name: Prepare variables
      run: |
        if [ "${{ matrix.cc }}" = "gcc" ] || [ -z "${{ matrix.cc }}" ]; then
          CC=gcc
          CXX=g++
        else
          CC=clang
          CXX=clang++
        fi
        echo "CC=$CC" >> $GITHUB_ENV
        echo "CXX=$CXX" >> $GITHUB_ENV
        echo "want_nls=${{ ! contains(matrix.name, 'no-deps') }}" >> $GITHUB_ENV

    - name: Show info
      run: |
        export -p
        echo '${{ toJSON(matrix) }}'

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt remove -y firefox # save a little time during upgrade
        sudo apt upgrade -y
        sudo apt install -y \
          python3 \
          python3-setuptools
        if [ "${{ matrix.ubuntu }}" != "20.04" ]; then
          sudo apt install -y \
          meson \
          ninja-build
        else
          sudo apt install -y python3-pip
          python -m pip install --upgrade pip
          pip install meson ninja
        fi
        if [ -n "${{ matrix.cross-file }}" ]; then
          if [ "${{ contains(matrix.cross-file, 'linux') }}" == "true" ]; then
            sudo apt install -y \
              g++-aarch64-linux-gnu \
              gettext:amd64 \
              libc6-dev-arm64-cross \
              liblua5.1-dev:amd64 \
              libphysfs-dev:amd64 \
              libsdl2-dev:amd64 \
              libsdl2-ttf-dev:amd64 \
              libsdl2-mixer-dev:amd64
          else
            # When using the mingw-w64 from Ubuntu Jammy, the sdl2 build fails
            # fatal error: d3d12sdklayers.h: No such file or directory
            # I found a discussion and fix at https://github.com/doitsujin/dxvk/issues/3328
            sudo apt purge --autoremove mingw-w64
            sudo apt install -y wget
            wget https://github.com/mstorsjo/llvm-mingw/releases/download/20230320/llvm-mingw-20230320-ucrt-ubuntu-18.04-x86_64.tar.xz
            tar xf llvm-mingw-20230320-ucrt-ubuntu-18.04-x86_64.tar.xz
            PATH="$PWD/llvm-mingw-20230320-ucrt-ubuntu-18.04-x86_64/bin:$PATH" LD_LIBRARY_PATH="$PWD/llvm-mingw-20230320-ucrt-ubuntu-18.04-x86_64/lib"
            echo "PATH=${PATH}" >> $GITHUB_ENV
            echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> $GITHUB_ENV
          fi
        fi

    - if: ${{ ! contains(matrix.name, 'no-deps') }}
      run: |
        sudo apt install -y \
          gettext \
          liblua5.1-0-dev \
          libphysfs-dev \
          libsdl2-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev

    - name: Setup
      run: |
        MESON_OPTS="$MESON_OPTS -Dprefix=$INST_PREFIX_DIR -Dnls=$want_nls"
        if [ -n "${{ matrix.cross-file }}" ]; then
          # ASAN libs for other architectures won't be available (unless we use
          # emulation or install an appropriate toolchain so we disable sanitize
          # https://github.com/google/sanitizers/wiki/AddressSanitizer
          MESON_OPTS="$MESON_OPTS --cross-file ${{ matrix.cross-file }} -Db_sanitize=none"
        fi
        ./setup-build.sh $MESON_OPTS

    - name: Meson build
      run: ninja -C _build

    - if: ${{ contains(matrix.cross-file, 'w64') }}
      run: test -f _build/netpanzer.exe

    - name: Test
      run: |
        # cross builds won't run on an amd64 runner without emulation
        if [ -z "${{ matrix.cross-file }}" ]; then
          cd _build
          meson test --suite=netpanzer -v
        fi

    - name: Data install test
      if: ${{ contains(matrix.name, 'data-install-test') }}
      run: |
        unset NETPANZER_DATADIR
        cd _build
        # want fail
        $GITHUB_WORKSPACE/tests/test_data_install.sh || true
        meson install --skip-subprojects
        cd $INST_PREFIX_DIR/bin
        # want pass
        $GITHUB_WORKSPACE/tests/test_data_install.sh
